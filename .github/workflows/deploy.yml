name: CI/CD with Docker Compose (rsync)

on:
  push:
    branches:
      - develop   # 개발 서버 배포 브랜치
      - deploy    # 운영 서버 배포 브랜치
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  # 1. PR 빌드 검증 (develop 브랜치 PR 올릴 때만)
  build-validation:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - run: chmod +x ./gradlew
      - run: ./gradlew clean build -x test

  # 2. 배포 (develop → dev 서버, deploy → prod 서버)
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    # 브랜치 이름에 따라 Environment 선택
    environment:
      name: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # EC2로 파일 동기화
      - name: Sync files to EC2 with rsync
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: ./
          remote_path: ~/Team15_BE
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USER }}
          remote_key: ${{ secrets.EC2_PEM_KEY }}

      # EC2에서 Docker Compose 실행
      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            cd ~/Team15_BE

            echo "===== Generate .env ====="
            cat > .env <<EOF
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            FRONTEND_URLS=${{ secrets.FRONTEND_URLS }}
            APP_PORT=${{ secrets.APP_PORT }}
            EOF

            echo "===== Docker Compose Restart ====="
            docker compose -f docker-compose.yml up -d --build app redis
            fi

            echo "===== Container Status ====="
            docker compose ps
            docker logs --tail=200 hyuswim-app
