name: Deploy to EC2 with GitHub Actions

on:
  push:
    branches:
      - develop  # develop 브랜치에 코드가 푸시되면 실행됩니다.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 이 워크플로우는 우분투 가상 환경에서 실행됩니다.

    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      #  3. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5. Spring Boot 애플리케이션 빌드
      - name: Build with Gradle
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: ./gradlew build -x test

      # 6. EC2에 있는 기존 JAR 파일 삭제
      - name: Delete old JAR on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            rm -f /home/ubuntu/Team15_BE/app.jar

      # 7. 새 JAR 파일을 EC2에 전송
      - name: Copy new JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          source: "build/libs/app.jar"
          target: "/home/ubuntu/Team15_BE"
          overwrite: true

      # 8. EC2에 접속하여 애플리케이션 실행 및 검증
      - name: Run application and verify on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          script: |
            JAR_PATH="/home/ubuntu/Team15_BE/app.jar"
            LOG_DIR="/home/ubuntu/Team15_BE/logs"
            
            mkdir -p $LOG_DIR
            LOG_FILE_NAME="$(date +'%Y-%m-%d_%H-%M-%S').log"
            LOG_FILE_PATH="$LOG_DIR/$LOG_FILE_NAME"

            # --- 최종 개선된 단계적 종료 로직 ---
            PID=$(pgrep -f "app.jar")
            if [ -n "$PID" ]; then
              echo "Found running process with PID: $PID. Attempting graceful shutdown..."
            
              set +e
              kill -15 $PID
              KILL_EXIT_CODE=$?
              set -e

              # 종료 코드 0(성공), 143(정상종료), 1(프로세스 없음)을 모두 성공으로 간주
              if [ $KILL_EXIT_CODE -eq 0 ] || [ $KILL_EXIT_CODE -eq 143 ] || [ $KILL_EXIT_CODE -eq 1 ]; then
                if [ $KILL_EXIT_CODE -eq 1 ]; then
                  echo "Process was not found. It may have already terminated."
                else
                  echo "Process termination signal sent successfully (Exit Code: $KILL_EXIT_CODE)."
                fi
            
                sleep 10
                if ps -p $PID > /dev/null; then
                  echo "Process did not terminate. Forcing shutdown with SIGKILL..."
                  kill -9 $PID
                else
                  echo "Process terminated successfully."
                fi
              else
                echo "ERROR: kill -15 command failed with unexpected exit code: $KILL_EXIT_CODE"
                exit 1
              fi
            else
              echo "No running Java process found."
            fi

            echo "Starting new application... Logging to $LOG_FILE_PATH"
            nohup java -jar \
              -D JWT_SECRET=${{ secrets.JWT_SECRET }} \
              $JAR_PATH > $LOG_FILE_PATH 2>&1 &
            
            # --- 실행 후 검증 코드 ---
            echo "Verifying application startup..."
            sleep 15
            
            if pgrep -f $JAR_PATH > /dev/null; then
              echo "Application started successfully."
              exit 0
            else
              echo "ERROR: Application failed to start. Please check the logs."
              tail -n 50 $LOG_FILE_PATH
              exit 1
            fi

