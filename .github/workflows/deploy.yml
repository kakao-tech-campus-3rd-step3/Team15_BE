name: Deploy to EC2 with GitHub Actions

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  build-and-deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 21 설치 (빌드용)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'

      # 3) Gradle 캐시
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{runner.os}}-gradle-${{hashFiles('**/*.gradle*', '**/gradle-wrapper.properties')}}
          restore-keys: |
            ${{runner.os}}-gradle-

      # 4) gradlew 실행권한
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 5) 빌드 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 6) 빌드 산출물(JAR) 파일명 추출 (최신 실행용 JAR만)
      - name: Find and export latest JAR file name
        id: find_jar
        shell: bash
        run: |
          set -euo pipefail
          FILE=$(ls -t build/libs/*-SNAPSHOT.jar | grep -v 'plain' | head -n1)
          if [ -z "$FILE" ]; then
            echo "::error::No executable JAR file found in build/libs/"
            exit 1
          fi
          JAR_FILE_NAME="$(basename "$FILE")"
          echo "Found executable JAR file: $JAR_FILE_NAME"
          echo "JAR_NAME=$JAR_FILE_NAME" >> "$GITHUB_OUTPUT"

      # (디버그) 빌드 산출물 확인
      - name: Debug - list local build/libs
        run: ls -al build/libs

      # 7) 원격 디렉토리 준비
      - name: Ensure target dir on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_PEM_KEY}}
          script: |
            set -e
            mkdir -p /home/${USER}/Team15_BE

      # 8) JAR + docker-compose.yml 전송
      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_PEM_KEY}}
          source: |
            build/libs/${{steps.find_jar.outputs.JAR_NAME}}
            docker-compose.yml
          target: "/home/${{secrets.EC2_USER}}/Team15_BE"
          overwrite: true
          strip_components: 2

      # 9) 파일 확인
      - name: Verify files on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_PEM_KEY}}
          script: |
            set -euo pipefail
            APP_DIR="/home/${USER}/Team15_BE"
            echo "--- Full listing of ${APP_DIR} ---"
            ls -al "${APP_DIR}"
            echo "--- Verifying specific files ---"
            ls -l "${APP_DIR}/${{steps.find_jar.outputs.JAR_NAME}}"
            ls -l "${APP_DIR}/docker-compose.yml"

      # 10) Docker Compose 실행 (DB/Redis 반영)
      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_PEM_KEY}}
          script: |
            cd ~/Team15_BE
            echo "===> Docker Compose 실행"
            docker compose --profile dev up -d

            echo "⏳ Waiting for MySQL to be ready..."
            until docker exec hyuswim-mysql mysqladmin ping -h"localhost" --silent; do
              sleep 3
            done
            echo "✅ MySQL is ready!"

      # 11) 애플리케이션 배포 & 실행
      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_PEM_KEY}}
          script: |
            set -Eeuo pipefail

            APP_DIR="/home/${USER}/Team15_BE"
            JAR_NAME="${{steps.find_jar.outputs.JAR_NAME}}"
            APP_JAR="app.jar"
            LOG_DIR="${APP_DIR}/logs"

            cd "${APP_DIR}"

            # Java 확인
            if ! command -v java >/dev/null 2>&1; then
              echo "ERROR: 'java' command not found on EC2. Install JDK/JRE first."
              exit 1
            fi

            # 심볼릭 링크 연결
            ln -sfn "${JAR_NAME}" "${APP_JAR}"
            echo "Linked ${JAR_NAME} -> ${APP_JAR}"

            # 포트 8080 프로세스 종료
            EXISTING_PID=$(lsof -t -i:8080 || true)
            if [ -n "$EXISTING_PID" ]; then
              echo "Stopping PID=$EXISTING_PID"
              kill -15 "$EXISTING_PID" || true
              sleep 5
              if ps -p "$EXISTING_PID" > /dev/null 2>&1; then
                kill -9 "$EXISTING_PID" || true
              fi
            fi

            mkdir -p "${LOG_DIR}"
            LOG_FILE_NAME="$(date +'%Y-%m-%d_%H-%M-%S').log"
            LOG_FILE_PATH="${LOG_DIR}/${LOG_FILE_NAME}"

            echo "Starting new application (${APP_JAR})... Logging to ${LOG_FILE_PATH}"
            JAVA_OPTS="--spring.datasource.url=jdbc:mysql://${{secrets.DB_HOST}}:${{secrets.DB_PORT}}/${{secrets.DB_NAME}}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8 \
            --spring.datasource.username=${{secrets.DB_USER}} \
            --spring.datasource.password=${{secrets.DB_PASSWORD}} \
            --spring.data.redis.host=${{secrets.REDIS_HOST}} \
            --spring.data.redis.port=${{secrets.REDIS_PORT}} \
            --jwt.secret=${{secrets.JWT_SECRET}} \
            --openai.api-key=${{secrets.OPENAI_API_KEY}} \
            --app.frontend-urls=\"${{secrets.FRONTEND_URLS}}\" \
            --kakao.client-id=${{secrets.KAKAO_CLIENT_ID}} \
            --kakao.redirect-uri=${{secrets.KAKAO_REDIRECT_URI}} \
            --google.client-id=${{secrets.GOOGLE_CLIENT_ID}} \
            --google.client-secret=${{secrets.GOOGLE_CLIENT_SECRET}} \
            --google.redirect-uri=${{secrets.GOOGLE_REDIRECT_URI}} \
            --MAIL_USERNAME=${{secrets.MAIL_USERNAME}} \
            --MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}}"

            nohup java -Dspring.profiles.active=dev -jar "${APP_JAR}" $JAVA_OPTS > "${LOG_FILE_PATH}" 2>&1 &
            sleep 15
            APP_PID=$!
            if ps -p $APP_PID > /dev/null 2>&1; then
              echo "✅ Application started successfully. PID=$APP_PID"
            else
              echo "❌ ERROR: Application failed to start. Last 120 log lines:"
              tail -n 120 "${LOG_FILE_PATH}" || true
              exit 1
            fi






