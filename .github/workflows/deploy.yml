name: CI/CD with Docker Compose

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  # 1. Pull Request 빌드 검증 (CI)
  build-validation:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - run: chmod +x ./gradlew
      - run: ./gradlew clean build -x test

  # 2. 배포 (develop 브랜치 push 시)
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      SPRING_PROFILE: ${{ secrets.SPRING_PROFILE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      FRONTEND_URLS: ${{ secrets.FRONTEND_URLS }}
      APP_PORT: ${{ secrets.APP_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # EC2로 프로젝트 전송
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          source: "."
          target: "~/Team15_BE"

      # EC2에서 Build + Docker Compose 실행
      - name: Run Docker Compose on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}
          envs: SPRING_PROFILE,DB_HOST,DB_PORT,DB_NAME,DB_USER,DB_PASSWORD,DB_ROOT_PASSWORD,REDIS_HOST,REDIS_PORT,JWT_SECRET,OPENAI_API_KEY,KAKAO_CLIENT_ID,KAKAO_REDIRECT_URI,GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,GOOGLE_REDIRECT_URI,MAIL_USERNAME,MAIL_PASSWORD,FRONTEND_URLS,APP_PORT
          script: |
            cd ~/Team15_BE

            echo "===== Gradle Build ====="
            chmod +x ./gradlew
            ./gradlew clean build -x test

            echo "===== Generate .env ====="
            echo "SPRING_PROFILE=${SPRING_PROFILE}" > .env
            echo "DB_HOST=${DB_HOST}" >> .env
            echo "DB_PORT=${DB_PORT}" >> .env
            echo "DB_NAME=${DB_NAME}" >> .env
            echo "DB_USER=${DB_USER}" >> .env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
            echo "DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD}" >> .env
            echo "REDIS_HOST=${REDIS_HOST}" >> .env
            echo "REDIS_PORT=${REDIS_PORT}" >> .env
            echo "JWT_SECRET=${JWT_SECRET}" >> .env
            echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env
            echo "KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}" >> .env
            echo "KAKAO_REDIRECT_URI=${KAKAO_REDIRECT_URI}" >> .env
            echo "GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}" >> .env
            echo "GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}" >> .env
            echo "MAIL_USERNAME=${MAIL_USERNAME}" >> .env
            echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> .env
            echo "FRONTEND_URLS=${FRONTEND_URLS}" >> .env
            echo "APP_PORT=${APP_PORT}" >> .env

            echo "===== Docker Compose Restart ====="
            docker compose down
            docker compose --env-file .env up -d --build

            echo "===== Container Status ====="
            docker compose ps
            docker logs --tail=50 hyuswim-app

            echo "===== Clean up .env ====="
            rm -f .env
